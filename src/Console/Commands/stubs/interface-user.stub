<?php

namespace {{ namespace }};

use {{ modelNamespace }};
use Illuminate\Database\Eloquent\Collection as EloquentCollection;
use Illuminate\Pagination\LengthAwarePaginator;

interface {{ class }}
{

    /**
     * Fetch all \{{ modelNamespace }} records.
     *
     * @return \Illuminate\Database\Eloquent\Collection
     */
    public function getAll(): EloquentCollection;

    /**
     * Fetch \{{ modelNamespace }} record by ID.
     *
     * @param int|string $id
     * @return \{{ modelNamespace }}|null
     */
    public function getById(int|string $id): null|{{ model }};

    /**
     * Delete \{{ modelNamespace }} record by ID.
     *
     * @param int|string $id
     * @return void
     */
    public function delete(int|string $id): void;

    /**
     * Create \{{ modelNamespace }} record.
     *
     * @param array $arrayDetails
     * @return \{{ modelNamespace }}
     */
    public function create(array $arrayDetails): {{ model }};

    /**
     * Fetch or create a single \{{ modelNamespace }} record.
     *
     * @param array $matchDetails
     * @param array $arrayDetails
     * @return \{{ modelNamespace }}
     */
    public function firstOrCreate(array $matchDetails, array $arrayDetails): {{ model }};

    /**
     * Update \{{ modelNamespace }} record.
     *
     * @param int|string $id
     * @param array $arrayDetails
     * @return int
     */
    public function update(int|string $id, array $arrayDetails): int;

    /**
     * Fetch \{{ modelNamespace }} paginated record.
     *
     * @param int $pageSize
     * @return \Illuminate\Pagination\LengthAwarePaginator
     */
    public function getPaginated(int $pageSize): LengthAwarePaginator;

    /**
     * Fetch \{{ modelNamespace }} record by ID and user ID.
     *
     * @param int|string $id
     * @param int|string $userId
     * @return \{{ modelNamespace }}|null
     */
    public function getByIdAndUserId(int|string $id, int|string $userId): null|{{ model }};

    /**
     * Fetch \{{ modelNamespace }} record by user ID.
     *
     * @param int|string $userId
     * @param bool $first
     * @return \{{ modelNamespace }}|null|\Illuminate\Database\Eloquent\Collection
     */
    public function getByUserId(int|string $userId, bool $first = false): null|{{ model }}|EloquentCollection;

    /**
     * Fetch \{{ modelNamespace }} paginated record by user ID.
     *
     * @param int $pageSize
     * @return \Illuminate\Pagination\LengthAwarePaginator
     */
    public function getPaginatedByUserId(int $pageSize, int|string $userId): LengthAwarePaginator;
}
